// Prisma schema for Clancy's Outdoors modern e-commerce platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Product Management
model Product {
  id               String   @id @default(cuid())
  sku              String?  @unique
  name             String
  description      String
  shortDescription String?
  slug             String   @unique
  status           ProductStatus @default(ACTIVE)
  
  // Pricing
  regularPrice     Decimal  @db.Decimal(10, 2)
  salePrice        Decimal? @db.Decimal(10, 2)
  currency         String   @default("USD")
  
  // Inventory
  trackInventory   Boolean  @default(true)
  quantity         Int?     @default(0)
  lowStockThreshold Int?    @default(5)
  inStock          Boolean  @default(true)
  
  // SEO
  metaTitle        String?
  metaDescription  String?
  focusKeyword     String?
  
  // Relationships
  images           ProductImage[]
  categories       ProductCategory[] @relation("ProductCategories")
  tags             ProductTag[]
  cartItems        CartItem[]
  orderItems       OrderItem[]
  reviews          ProductReview[]
  
  // Timestamps
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String
  width     Int
  height    Int
  priority  Int     @default(0)
  
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@map("product_images")
}

model ProductCategory {
  id           String    @id @default(cuid())
  name         String
  slug         String    @unique
  description  String?
  parentId     String?
  level        Int       @default(0)
  productCount Int       @default(0)
  imageUrl     String?
  
  // Self-referential relationship
  parent       ProductCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children     ProductCategory[] @relation("CategoryHierarchy")
  
  // Many-to-many with products
  products     Product[] @relation("ProductCategories")
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("product_categories")
}

model ProductTag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  
  products  Product[]
  
  createdAt DateTime @default(now())
  
  @@map("product_tags")
}

// Customer Management
model Customer {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  phone     String?
  
  // Authentication
  passwordHash String?
  emailVerified DateTime?
  
  // Preferences
  marketingOptIn Boolean @default(false)
  currency       String  @default("USD")
  
  // Relationships
  addresses      CustomerAddress[]
  orders         Order[]
  carts          Cart[]
  reviews        ProductReview[]
  
  // Default addresses
  defaultShippingAddressId String?
  defaultBillingAddressId  String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("customers")
}

model CustomerAddress {
  id         String  @id @default(cuid())
  customerId String
  
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String
  zip        String
  country    String  @default("US")
  phone      String?
  
  // Address type
  isDefault  Boolean @default(false)
  type       AddressType @default(SHIPPING)
  
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  // Orders using this address
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("customer_addresses")
}

// Shopping Cart
model Cart {
  id         String   @id @default(cuid())
  customerId String?
  sessionId  String?  // For guest carts
  
  // Totals (calculated)
  subtotal   Decimal @default(0) @db.Decimal(10, 2)
  tax        Decimal @default(0) @db.Decimal(10, 2)
  shipping   Decimal @default(0) @db.Decimal(10, 2)
  total      Decimal @default(0) @db.Decimal(10, 2)
  currency   String  @default("USD")
  
  // Relationships
  customer   Customer?  @relation(fields: [customerId], references: [id], onDelete: SetNull)
  items      CartItem[]
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@map("carts")
}

model CartItem {
  id        String @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  
  // Snapshot pricing at time of adding to cart
  unitPrice Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)
  
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  addedAt   DateTime @default(now())
  
  @@unique([cartId, productId])
  @@map("cart_items")
}

// Order Management
model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  customerId  String?
  
  // Status
  status            OrderStatus @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED)
  
  // Pricing
  subtotal   Decimal @db.Decimal(10, 2)
  tax        Decimal @db.Decimal(10, 2)
  shipping   Decimal @db.Decimal(10, 2)
  total      Decimal @db.Decimal(10, 2)
  currency   String  @default("USD")
  
  // Addresses (snapshot at time of order)
  shippingAddressId String
  billingAddressId  String
  
  // Payment information
  paymentMethod     PaymentMethodType
  paymentIntentId   String? // Stripe payment intent ID
  last4             String?
  brand             String?
  
  // Fulfillment
  trackingNumber    String?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  
  // Relationships
  customer          Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  shippingAddress   CustomerAddress @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress    CustomerAddress @relation("BillingAddress", fields: [billingAddressId], references: [id])
  items             OrderItem[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("orders")
}

model OrderItem {
  id           String @id @default(cuid())
  orderId      String
  productId    String
  
  // Product snapshot at time of order
  productName  String
  productImage String?
  productSku   String
  
  quantity     Int
  unitPrice    Decimal @db.Decimal(10, 2)
  totalPrice   Decimal @db.Decimal(10, 2)
  
  order        Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product      Product @relation(fields: [productId], references: [id])
  
  createdAt    DateTime @default(now())
  
  @@map("order_items")
}

// Reviews & Feedback
model ProductReview {
  id         String @id @default(cuid())
  productId  String
  customerId String?
  
  rating     Int     // 1-5 stars
  title      String
  comment    String
  
  // Reviewer info (for guest reviews)
  reviewerName  String
  reviewerEmail String
  
  // Moderation
  approved   Boolean @default(false)
  helpful    Int     @default(0)
  
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@map("product_reviews")
}

// Search & Analytics
model SearchLog {
  id        String @id @default(cuid())
  query     String
  results   Int    @default(0)
  userId    String?
  sessionId String?
  
  createdAt DateTime @default(now())
  
  @@map("search_logs")
}

// Enums
enum ProductStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  CAPTURED
  FAILED
  REFUNDED
  CANCELLED
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIAL
  FULFILLED
}

enum PaymentMethodType {
  STRIPE_CARD
  STRIPE_ACH
  APPLE_PAY
  GOOGLE_PAY
} 